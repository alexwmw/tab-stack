



var everySecond = window.setInterval(function () {
    if (!status.pending && !status.paused && !status.disabled) {
      Object.keys(times).forEach((tabId) => {
        const tabLocked = (tabId) => lockedTabIds.includes(parseInt(tabId));
        const tabActive = (tabId) => activeTabIds.includes(parseInt(tabId));
        const tabAudible = (tabId) => openTabs[tabId].audible;
        const tabPinned = (tabId) => openTabs[tabId].pinned;
        if (
          !tabLocked(tabId) &&
          !tabActive(tabId) &&
          !tabPinned &&
          (!tabAudible(tabId) || !settings.audible_lock)
        ) {
          times[tabId] = times[tabId] - 1;
        }
        if (tabActive(tabId)) {
          times[tabId] = time();
        }
        if (times[tabId] == 0) {
          chrome.tabs.remove(parseInt(tabId));
        }
        console.log(tabId + ": " + times[tabId]);
      });
    }
  }, 1000);
  
  
  
  var msgResponses = {
    request_tabs: {
      msg: "data sent from bg page",
      openTabData: openTabs,
      closedTabsData: ClosedTab.tabs,
      lockedTabIdsData: lockedTabIds,
      mostRecentClosed: ClosedTab.tabOrder,
    },
    resurrect: {
      msg: "lockedTabIds",
      data: lockedTabIds,
    },
    request_locked_tabs: {
      msg: "lockedTabIds",
      data: lockedTabIds,
    },
    tab_locked: {
      msg: "tab_locked",
      data: lockedTabIds,
    },
    forget_closed_tab: {
      closedTabs: ClosedTab.tabs,
    },
    request_times: {},
    set_setting: {},
    get_setting: {},
    get_all_settings: {},

    get_status: {
      status: status,
    },
  };
  var msgProcedures = {
    request_tabs: (obj) => {},
    resurrect: (obj) => {
      ClosedTab.tabs[obj.tabId].resurrect();
    },
    request_locked_tabs: (obj) => {},
    tab_locked: (obj) => {
      lockedTabIds = obj.data;
      times[obj.id] = time();
    },
    forget_closed_tab: (obj) => {
      delete ClosedTab.tabs[obj.data];
      chrome.runtime.sendMessage({
        msg: "tab_forgotten",
        data: ClosedTab.tabs,
      });
    },
    request_times: (obj) => {
      sendResponse({
        settings: settings,
      });
    },
    set_setting: (obj) => {
      settings[obj.key] = obj.value;
      resetTimers(obj.key);
      status.paused = settings.paused;
      status.disabled = !settings.allow_closing;
    },
    get_setting: (obj) => {
      sendResponse({
        value: settings[obj.key],
      });
    },
    get_all_settings: (obj) => {
      sendResponse({
        times: times[obj.id],
      });
    },
    get_status: (obj) => {},
  };

  msgProcedures[obj.msg](obj);
  msgResponses[obj.msg]